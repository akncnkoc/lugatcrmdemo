<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Spatie\Activitylog\Traits\LogsActivity;

/**
 * App\Models\Variant
 *
 * @property int $id
 * @property string $name
 * @property int|null $variant_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property \Illuminate\Support\Carbon|null $deleted_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\Spatie\Activitylog\Models\Activity[] $activities
 * @property-read int|null $activities_count
 * @property-read \Illuminate\Database\Eloquent\Collection|Variant[] $childrenVariants
 * @property-read int|null $children_variants_count
 * @property-read Variant|null $parent_variant
 * @property-read \Illuminate\Database\Eloquent\Collection|Variant[] $variants
 * @property-read int|null $variants_count
 * @method static Builder|Variant newModelQuery()
 * @method static Builder|Variant newQuery()
 * @method static \Illuminate\Database\Query\Builder|Variant onlyTrashed()
 * @method static Builder|Variant query()
 * @method static Builder|Variant whereCreatedAt($value)
 * @method static Builder|Variant whereDeletedAt($value)
 * @method static Builder|Variant whereId($value)
 * @method static Builder|Variant whereName($value)
 * @method static Builder|Variant whereUpdatedAt($value)
 * @method static Builder|Variant whereVariantId($value)
 * @method static \Illuminate\Database\Query\Builder|Variant withTrashed()
 * @method static \Illuminate\Database\Query\Builder|Variant withoutTrashed()
 * @mixin \Eloquent
 */
class Variant extends Model
{
  use SoftDeletes;

  protected static $logAttributes = [];
  protected $guarded = [];

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub
    static::addGlobalScope('order', function (Builder $builder) {
      $builder->orderBy('id', 'desc');
    });
    static::saving(function (Model $model) {
      static::$logAttributes = array_keys($model->getDirty());
    });
    static::updating(function (Model $model) {
      static::$logAttributes = array_keys($model->getDirty());
    });
    static::deleting(function (Model $model) {
      static::$logAttributes = array_keys($model->getDirty());
    });
  }

  public function variants()
  {
    return $this->hasMany(Variant::class);
  }

  public function parent_variant()
  {
    return $this->belongsTo(Variant::class, 'variant_id');
  }

  public function childrenVariants()
  {
    return $this->hasMany(Variant::class)->with('variants');
  }
}
